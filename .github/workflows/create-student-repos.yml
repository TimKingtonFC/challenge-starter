name: Create Student Repo from Issue

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  create-student-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: parse
        run: |
          if [[ "${{ github.event.issue.body }}" == /create-student-repo* ]]; then
            CMD="${{ github.event.issue.body }}"
          elif [[ "${{ github.event.comment.body }}" == /create-student-repo* ]]; then
            CMD="${{ github.event.comment.body }}"
          else
            echo "No /create-student-repo command found. Exiting. ${{ github.event.comment.body }} ${{ github.event.issue.body }}"
            exit 0
          fi
          # Extract username and project name
          STUDENT_GITHUB_USERNAME=$(echo $CMD | awk '{print $2}')
          PROJECT_NAME=$(echo $CMD | awk '{print $3}')
          if [[ -z "$STUDENT_GITHUB_USERNAME" || -z "$PROJECT_NAME" ]]; then
            echo "Malformed command. Usage: /create-student-repo <github-username> <project-name>"
            exit 0
          fi
          echo "student_github_username=$STUDENT_GITHUB_USERNAME" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Create empty student repo
        id: create_repo
        if: steps.parse.outputs.student_github_username && steps.parse.outputs.project_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const student = '${{ steps.parse.outputs.student_github_username }}';
            const projectName = '${{ steps.parse.outputs.project_name }}';
            const repoName = `${projectName}-${student}`;
            const [owner, templateRepo] = process.env.GITHUB_REPOSITORY.split('/');

            // Create an empty repo under our account
            const repo = await github.rest.repos.createForAuthenticatedUser({
              name: repoName,
              private: true,
              description: `${projectName} challenge repo for ${student}`
            });

            // Add student as admin collaborator
            await github.rest.repos.addCollaborator({
              owner: owner,
              repo: repoName,
              username: student,
              permission: 'admin'
            });

            core.setOutput('repo_url', repo.data.html_url);
            core.setOutput('student_repo', `${owner}/${repoName}`);
            core.setOutput('project_name', projectName);

      - name: Clone main repo and push starter branch
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          # Debug: Check what we're trying to clone
          echo "Attempting to clone: TimKingtonFC/${{ steps.create_repo.outputs.project_name }}"
          echo "Student repo: ${{ steps.create_repo.outputs.student_repo }}"

          # Clone the main repo as a bare repository
          git clone --bare https://${{ secrets.ADMIN_GITHUB_TOKEN }}@github.com/TimKingtonFC/${{ steps.create_repo.outputs.project_name }}.git mirror
          cd mirror

          # Push the part001-starter branch to the student repo as part001-starter
          git push https://${{ secrets.ADMIN_GITHUB_TOKEN }}@github.com/${{ steps.create_repo.outputs.student_repo }}.git part001-starter:part001-starter

          # Clean up
          cd ..
          rm -rf mirror

      - name: Set PROJECT_NAME variable in student repo
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.ADMIN_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ steps.create_repo.outputs.student_repo }}/actions/variables \
            -d '{"name": "PROJECT_NAME", "value": "${{ steps.create_repo.outputs.project_name }}"}'

      - name: Trigger deliver-starter workflow in main repo
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.ADMIN_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ steps.create_repo.outputs.project_name }}/dispatches \
            -d '{"event_type": "deliver-starter", "client_payload": {"student_repo": "${{ steps.create_repo.outputs.student_repo }}", "requesting_part": 1}}'

      - name: Comment with result
        if: steps.create_repo.outputs.repo_url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const repo_url = '${{ steps.create_repo.outputs.repo_url }}';
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: `Student repository created: ${repo_url}`
            });
