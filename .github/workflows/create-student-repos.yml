name: Create Student Repo from Issue

on:
  issues:
    types: [opened]

jobs:
  create-student-repo:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '/start-challenge') || contains(github.event.issue.body, '/start-challenge')
    steps:
      - name: Parse command
        id: parse
        run: |
           # Check both title and body for the command
           TITLE="${{ github.event.issue.title }}"
           BODY="${{ github.event.issue.body }}"

           if [[ "$TITLE" == /start-challenge* ]]; then
             CMD="$TITLE"
           elif [[ "$BODY" == /start-challenge* ]]; then
             CMD="$BODY"
           else
             echo "No /start-challenge command found in title or body. Exiting."
             exit 0
           fi

           # Extract project name (username comes from issue author)
           PROJECT_NAME=$(echo $CMD | awk '{print $2}')
           if [[ -z "$PROJECT_NAME" ]]; then
             echo "Malformed command. Usage: /start-challenge <project-name>"
             exit 0
           fi

           # Get username from issue author
           STUDENT_GITHUB_USERNAME="${{ github.event.issue.user.login }}"

           echo "student_github_username=$STUDENT_GITHUB_USERNAME" >> $GITHUB_OUTPUT
           echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Find Starter Project
        id: find_starter
        if: steps.parse.outputs.student_github_username && steps.parse.outputs.project_name
        run: |
          PROJECT_NAME="${{ steps.parse.outputs.project_name }}"

          STARTER_PROJECTS=("chaltest" "VM611")

          PROJECT_FOUND=false
          for projectName in "${STARTER_PROJECTS[@]}"; do
            if [[ "$PROJECT_NAME" == "$projectName" ]]; then
              PROJECT_FOUND=true
              break
            fi
          done

          if [[ "$PROJECT_FOUND" == "false" ]]; then
            echo "‚ùå **Project not found!**"
            echo ""
            echo "The project '$PROJECT_NAME' is not in the list of starter projects."
            exit 1
          fi

          echo "‚úÖ Project '$PROJECT_NAME' found."

      - name: Create empty student repo
        id: create_repo
        if: steps.parse.outputs.student_github_username && steps.parse.outputs.project_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const student = '${{ steps.parse.outputs.student_github_username }}';
            const projectName = '${{ steps.parse.outputs.project_name }}';
            const repoName = `${projectName}-${student}`;
            const [owner, templateRepo] = process.env.GITHUB_REPOSITORY.split('/');

            // Create an empty repo under our account
            const repo = await github.rest.repos.createForAuthenticatedUser({
              name: repoName,
              private: true,
              description: `${projectName} challenge repo for ${student}`
            });

            // Add student as admin collaborator
            await github.rest.repos.addCollaborator({
              owner: owner,
              repo: repoName,
              username: student,
              permission: 'admin'
            });

            core.setOutput('repo_url', repo.data.html_url);
            core.setOutput('student_repo', `${owner}/${repoName}`);
            core.setOutput('project_name', projectName);

      - name: Clone main repo and push starter branch
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          # Clone the main repo as a bare repository
          git clone --bare https://${{ secrets.ADMIN_GITHUB_TOKEN }}@github.com/TimKingtonFC/${{ steps.create_repo.outputs.project_name }}.git mirror
          cd mirror

          # Push the part001-starter branch to the student repo as part001-starter
          git push https://${{ secrets.ADMIN_GITHUB_TOKEN }}@github.com/${{ steps.create_repo.outputs.student_repo }}.git part001-starter:part001-starter

          # Create part001-work branch from part001-starter
          git push https://${{ secrets.ADMIN_GITHUB_TOKEN }}@github.com/${{ steps.create_repo.outputs.student_repo }}.git part001-starter:part001-work

          # Clean up
          cd ..
          rm -rf mirror

      - name: Set default branch to part001-work
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.ADMIN_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ steps.create_repo.outputs.student_repo }} \
            -d '{"default_branch": "part001-work"}'

      - name: Set PROJECT_NAME variable in student repo
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.ADMIN_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ steps.create_repo.outputs.student_repo }}/actions/variables \
            -d '{"name": "PROJECT_NAME", "value": "${{ steps.create_repo.outputs.project_name }}"}'

      - name: Add student to instructions repo
        id: add_student_to_instructions
        if: steps.create_repo.outputs.student_repo && steps.create_repo.outputs.project_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const student = '${{ steps.parse.outputs.student_github_username }}';
            const projectName = '${{ steps.create_repo.outputs.project_name }}';
            const instructionsRepoName = `${projectName}-Instructions`;
            const [owner] = process.env.GITHUB_REPOSITORY.split('/');

            try {
              // Add student as collaborator to instructions repo with read access
              await github.rest.repos.addCollaborator({
                owner: owner,
                repo: instructionsRepoName,
                username: student,
                permission: 'pull' // Read-only access
              });

              core.setOutput('instructions_repo_url', `https://github.com/${owner}/${instructionsRepoName}`);
              console.log(`‚úÖ Added ${student} to ${instructionsRepoName} with read access`);
            } catch (error) {
              console.warn(`‚ö†Ô∏è Could not add ${student} to ${instructionsRepoName}: ${error.message}`);
              // Don't fail the workflow if instructions repo doesn't exist or other issues
            }

      - name: Comment with result
        if: steps.create_repo.outputs.repo_url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const repo_url = '${{ steps.create_repo.outputs.repo_url }}';
            const instructions_repo_url = '${{ steps.add_student_to_instructions.outputs.instructions_repo_url || '' }}';

            let commentBody = `‚úÖ **Student repository created successfully!**\n\n`;
            commentBody += `üìÅ **Your challenge repository:** ${repo_url}\n`;

            if (instructions_repo_url) {
              commentBody += `üìñ **Instructions repository:** ${instructions_repo_url}\n`;
              commentBody += `\nYou have been granted read access to the instructions repository.`;
            }

                         commentBody += `\n\nüöÄ **Next steps:**\n`;
             commentBody += `1. Accept the invitations to **both** repositories\n`;
             commentBody += `2. Clone your challenge repository\n`;
             commentBody += `3. Open it in VS Code with the Challenge Manager extension\n`;
             commentBody += `4. Start working on Part 1!`;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: commentBody
            });

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;

            // Determine which step failed
            let failedStep = 'Unknown step';
            if ('${{ steps.parse.outcome }}' === 'failure') {
              failedStep = 'Command parsing';
            } else if ('${{ steps.create_repo.outcome }}' === 'failure') {
              failedStep = 'Repository creation';
            } else if ('${{ steps.find_starter.outcome }}' === 'failure') {
              failedStep = 'Find starter project';
            } else if ('${{ steps.clone_repo.outcome }}' === 'failure') {
              failedStep = 'Code delivery';
            } else if ('${{ steps.set_default.outcome }}' === 'failure') {
              failedStep = 'Setting default branch';
            }

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: `‚ùå **Workflow failed!**\n\nFailed at: ${failedStep}\n\nPlease check the workflow logs for details and try again.`
            });
